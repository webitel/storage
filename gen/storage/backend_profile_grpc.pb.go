// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: backend_profile.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BackendProfileService_CreateBackendProfile_FullMethodName = "/storage.BackendProfileService/CreateBackendProfile"
	BackendProfileService_SearchBackendProfile_FullMethodName = "/storage.BackendProfileService/SearchBackendProfile"
	BackendProfileService_ReadBackendProfile_FullMethodName   = "/storage.BackendProfileService/ReadBackendProfile"
	BackendProfileService_UpdateBackendProfile_FullMethodName = "/storage.BackendProfileService/UpdateBackendProfile"
	BackendProfileService_PatchBackendProfile_FullMethodName  = "/storage.BackendProfileService/PatchBackendProfile"
	BackendProfileService_DeleteBackendProfile_FullMethodName = "/storage.BackendProfileService/DeleteBackendProfile"
)

// BackendProfileServiceClient is the client API for BackendProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendProfileServiceClient interface {
	// Create BackendProfile
	CreateBackendProfile(ctx context.Context, in *CreateBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error)
	// List of BackendProfile
	SearchBackendProfile(ctx context.Context, in *SearchBackendProfileRequest, opts ...grpc.CallOption) (*ListBackendProfile, error)
	// BackendProfile item
	ReadBackendProfile(ctx context.Context, in *ReadBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error)
	// Update BackendProfile
	UpdateBackendProfile(ctx context.Context, in *UpdateBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error)
	// Patch BackendProfile
	PatchBackendProfile(ctx context.Context, in *PatchBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error)
	// Remove BackendProfile
	DeleteBackendProfile(ctx context.Context, in *DeleteBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error)
}

type backendProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendProfileServiceClient(cc grpc.ClientConnInterface) BackendProfileServiceClient {
	return &backendProfileServiceClient{cc}
}

func (c *backendProfileServiceClient) CreateBackendProfile(ctx context.Context, in *CreateBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error) {
	out := new(BackendProfile)
	err := c.cc.Invoke(ctx, BackendProfileService_CreateBackendProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendProfileServiceClient) SearchBackendProfile(ctx context.Context, in *SearchBackendProfileRequest, opts ...grpc.CallOption) (*ListBackendProfile, error) {
	out := new(ListBackendProfile)
	err := c.cc.Invoke(ctx, BackendProfileService_SearchBackendProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendProfileServiceClient) ReadBackendProfile(ctx context.Context, in *ReadBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error) {
	out := new(BackendProfile)
	err := c.cc.Invoke(ctx, BackendProfileService_ReadBackendProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendProfileServiceClient) UpdateBackendProfile(ctx context.Context, in *UpdateBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error) {
	out := new(BackendProfile)
	err := c.cc.Invoke(ctx, BackendProfileService_UpdateBackendProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendProfileServiceClient) PatchBackendProfile(ctx context.Context, in *PatchBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error) {
	out := new(BackendProfile)
	err := c.cc.Invoke(ctx, BackendProfileService_PatchBackendProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendProfileServiceClient) DeleteBackendProfile(ctx context.Context, in *DeleteBackendProfileRequest, opts ...grpc.CallOption) (*BackendProfile, error) {
	out := new(BackendProfile)
	err := c.cc.Invoke(ctx, BackendProfileService_DeleteBackendProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendProfileServiceServer is the server API for BackendProfileService service.
// All implementations must embed UnimplementedBackendProfileServiceServer
// for forward compatibility
type BackendProfileServiceServer interface {
	// Create BackendProfile
	CreateBackendProfile(context.Context, *CreateBackendProfileRequest) (*BackendProfile, error)
	// List of BackendProfile
	SearchBackendProfile(context.Context, *SearchBackendProfileRequest) (*ListBackendProfile, error)
	// BackendProfile item
	ReadBackendProfile(context.Context, *ReadBackendProfileRequest) (*BackendProfile, error)
	// Update BackendProfile
	UpdateBackendProfile(context.Context, *UpdateBackendProfileRequest) (*BackendProfile, error)
	// Patch BackendProfile
	PatchBackendProfile(context.Context, *PatchBackendProfileRequest) (*BackendProfile, error)
	// Remove BackendProfile
	DeleteBackendProfile(context.Context, *DeleteBackendProfileRequest) (*BackendProfile, error)
	mustEmbedUnimplementedBackendProfileServiceServer()
}

// UnimplementedBackendProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackendProfileServiceServer struct {
}

func (UnimplementedBackendProfileServiceServer) CreateBackendProfile(context.Context, *CreateBackendProfileRequest) (*BackendProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackendProfile not implemented")
}
func (UnimplementedBackendProfileServiceServer) SearchBackendProfile(context.Context, *SearchBackendProfileRequest) (*ListBackendProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBackendProfile not implemented")
}
func (UnimplementedBackendProfileServiceServer) ReadBackendProfile(context.Context, *ReadBackendProfileRequest) (*BackendProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBackendProfile not implemented")
}
func (UnimplementedBackendProfileServiceServer) UpdateBackendProfile(context.Context, *UpdateBackendProfileRequest) (*BackendProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBackendProfile not implemented")
}
func (UnimplementedBackendProfileServiceServer) PatchBackendProfile(context.Context, *PatchBackendProfileRequest) (*BackendProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchBackendProfile not implemented")
}
func (UnimplementedBackendProfileServiceServer) DeleteBackendProfile(context.Context, *DeleteBackendProfileRequest) (*BackendProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackendProfile not implemented")
}
func (UnimplementedBackendProfileServiceServer) mustEmbedUnimplementedBackendProfileServiceServer() {}

// UnsafeBackendProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendProfileServiceServer will
// result in compilation errors.
type UnsafeBackendProfileServiceServer interface {
	mustEmbedUnimplementedBackendProfileServiceServer()
}

func RegisterBackendProfileServiceServer(s grpc.ServiceRegistrar, srv BackendProfileServiceServer) {
	s.RegisterService(&BackendProfileService_ServiceDesc, srv)
}

func _BackendProfileService_CreateBackendProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBackendProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendProfileServiceServer).CreateBackendProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendProfileService_CreateBackendProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendProfileServiceServer).CreateBackendProfile(ctx, req.(*CreateBackendProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendProfileService_SearchBackendProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBackendProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendProfileServiceServer).SearchBackendProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendProfileService_SearchBackendProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendProfileServiceServer).SearchBackendProfile(ctx, req.(*SearchBackendProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendProfileService_ReadBackendProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBackendProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendProfileServiceServer).ReadBackendProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendProfileService_ReadBackendProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendProfileServiceServer).ReadBackendProfile(ctx, req.(*ReadBackendProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendProfileService_UpdateBackendProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBackendProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendProfileServiceServer).UpdateBackendProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendProfileService_UpdateBackendProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendProfileServiceServer).UpdateBackendProfile(ctx, req.(*UpdateBackendProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendProfileService_PatchBackendProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchBackendProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendProfileServiceServer).PatchBackendProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendProfileService_PatchBackendProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendProfileServiceServer).PatchBackendProfile(ctx, req.(*PatchBackendProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendProfileService_DeleteBackendProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBackendProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendProfileServiceServer).DeleteBackendProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendProfileService_DeleteBackendProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendProfileServiceServer).DeleteBackendProfile(ctx, req.(*DeleteBackendProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendProfileService_ServiceDesc is the grpc.ServiceDesc for BackendProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.BackendProfileService",
	HandlerType: (*BackendProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBackendProfile",
			Handler:    _BackendProfileService_CreateBackendProfile_Handler,
		},
		{
			MethodName: "SearchBackendProfile",
			Handler:    _BackendProfileService_SearchBackendProfile_Handler,
		},
		{
			MethodName: "ReadBackendProfile",
			Handler:    _BackendProfileService_ReadBackendProfile_Handler,
		},
		{
			MethodName: "UpdateBackendProfile",
			Handler:    _BackendProfileService_UpdateBackendProfile_Handler,
		},
		{
			MethodName: "PatchBackendProfile",
			Handler:    _BackendProfileService_PatchBackendProfile_Handler,
		},
		{
			MethodName: "DeleteBackendProfile",
			Handler:    _BackendProfileService_DeleteBackendProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "backend_profile.proto",
}
