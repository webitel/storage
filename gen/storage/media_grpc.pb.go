// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: media.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MediaFileService_SearchMediaFile_FullMethodName = "/storage.MediaFileService/SearchMediaFile"
	MediaFileService_ReadMediaFile_FullMethodName   = "/storage.MediaFileService/ReadMediaFile"
	MediaFileService_DeleteMediaFile_FullMethodName = "/storage.MediaFileService/DeleteMediaFile"
	MediaFileService_ReadMediaFileNA_FullMethodName = "/storage.MediaFileService/ReadMediaFileNA"
)

// MediaFileServiceClient is the client API for MediaFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaFileServiceClient interface {
	// Search MediaFile
	SearchMediaFile(ctx context.Context, in *SearchMediaFileRequest, opts ...grpc.CallOption) (*ListMedia, error)
	// MediaFile item
	ReadMediaFile(ctx context.Context, in *ReadMediaFileRequest, opts ...grpc.CallOption) (*MediaFile, error)
	// Remove MediaFile
	DeleteMediaFile(ctx context.Context, in *DeleteMediaFileRequest, opts ...grpc.CallOption) (*MediaFile, error)
	ReadMediaFileNA(ctx context.Context, in *ReadMediaFileRequest, opts ...grpc.CallOption) (*MediaFile, error)
}

type mediaFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaFileServiceClient(cc grpc.ClientConnInterface) MediaFileServiceClient {
	return &mediaFileServiceClient{cc}
}

func (c *mediaFileServiceClient) SearchMediaFile(ctx context.Context, in *SearchMediaFileRequest, opts ...grpc.CallOption) (*ListMedia, error) {
	out := new(ListMedia)
	err := c.cc.Invoke(ctx, MediaFileService_SearchMediaFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaFileServiceClient) ReadMediaFile(ctx context.Context, in *ReadMediaFileRequest, opts ...grpc.CallOption) (*MediaFile, error) {
	out := new(MediaFile)
	err := c.cc.Invoke(ctx, MediaFileService_ReadMediaFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaFileServiceClient) DeleteMediaFile(ctx context.Context, in *DeleteMediaFileRequest, opts ...grpc.CallOption) (*MediaFile, error) {
	out := new(MediaFile)
	err := c.cc.Invoke(ctx, MediaFileService_DeleteMediaFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaFileServiceClient) ReadMediaFileNA(ctx context.Context, in *ReadMediaFileRequest, opts ...grpc.CallOption) (*MediaFile, error) {
	out := new(MediaFile)
	err := c.cc.Invoke(ctx, MediaFileService_ReadMediaFileNA_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaFileServiceServer is the server API for MediaFileService service.
// All implementations must embed UnimplementedMediaFileServiceServer
// for forward compatibility
type MediaFileServiceServer interface {
	// Search MediaFile
	SearchMediaFile(context.Context, *SearchMediaFileRequest) (*ListMedia, error)
	// MediaFile item
	ReadMediaFile(context.Context, *ReadMediaFileRequest) (*MediaFile, error)
	// Remove MediaFile
	DeleteMediaFile(context.Context, *DeleteMediaFileRequest) (*MediaFile, error)
	ReadMediaFileNA(context.Context, *ReadMediaFileRequest) (*MediaFile, error)
	mustEmbedUnimplementedMediaFileServiceServer()
}

// UnimplementedMediaFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMediaFileServiceServer struct {
}

func (UnimplementedMediaFileServiceServer) SearchMediaFile(context.Context, *SearchMediaFileRequest) (*ListMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchMediaFile not implemented")
}
func (UnimplementedMediaFileServiceServer) ReadMediaFile(context.Context, *ReadMediaFileRequest) (*MediaFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMediaFile not implemented")
}
func (UnimplementedMediaFileServiceServer) DeleteMediaFile(context.Context, *DeleteMediaFileRequest) (*MediaFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMediaFile not implemented")
}
func (UnimplementedMediaFileServiceServer) ReadMediaFileNA(context.Context, *ReadMediaFileRequest) (*MediaFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMediaFileNA not implemented")
}
func (UnimplementedMediaFileServiceServer) mustEmbedUnimplementedMediaFileServiceServer() {}

// UnsafeMediaFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaFileServiceServer will
// result in compilation errors.
type UnsafeMediaFileServiceServer interface {
	mustEmbedUnimplementedMediaFileServiceServer()
}

func RegisterMediaFileServiceServer(s grpc.ServiceRegistrar, srv MediaFileServiceServer) {
	s.RegisterService(&MediaFileService_ServiceDesc, srv)
}

func _MediaFileService_SearchMediaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchMediaFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaFileServiceServer).SearchMediaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaFileService_SearchMediaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaFileServiceServer).SearchMediaFile(ctx, req.(*SearchMediaFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaFileService_ReadMediaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMediaFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaFileServiceServer).ReadMediaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaFileService_ReadMediaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaFileServiceServer).ReadMediaFile(ctx, req.(*ReadMediaFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaFileService_DeleteMediaFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaFileServiceServer).DeleteMediaFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaFileService_DeleteMediaFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaFileServiceServer).DeleteMediaFile(ctx, req.(*DeleteMediaFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaFileService_ReadMediaFileNA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadMediaFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaFileServiceServer).ReadMediaFileNA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MediaFileService_ReadMediaFileNA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaFileServiceServer).ReadMediaFileNA(ctx, req.(*ReadMediaFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaFileService_ServiceDesc is the grpc.ServiceDesc for MediaFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.MediaFileService",
	HandlerType: (*MediaFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchMediaFile",
			Handler:    _MediaFileService_SearchMediaFile_Handler,
		},
		{
			MethodName: "ReadMediaFile",
			Handler:    _MediaFileService_ReadMediaFile_Handler,
		},
		{
			MethodName: "DeleteMediaFile",
			Handler:    _MediaFileService_DeleteMediaFile_Handler,
		},
		{
			MethodName: "ReadMediaFileNA",
			Handler:    _MediaFileService_ReadMediaFileNA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media.proto",
}
