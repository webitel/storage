// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: file_policies.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FilePoliciesService_CreateFilePolicy_FullMethodName       = "/storage.FilePoliciesService/CreateFilePolicy"
	FilePoliciesService_SearchFilePolicies_FullMethodName     = "/storage.FilePoliciesService/SearchFilePolicies"
	FilePoliciesService_ReadFilePolicy_FullMethodName         = "/storage.FilePoliciesService/ReadFilePolicy"
	FilePoliciesService_UpdateFilePolicy_FullMethodName       = "/storage.FilePoliciesService/UpdateFilePolicy"
	FilePoliciesService_PatchFilePolicy_FullMethodName        = "/storage.FilePoliciesService/PatchFilePolicy"
	FilePoliciesService_DeleteFilePolicy_FullMethodName       = "/storage.FilePoliciesService/DeleteFilePolicy"
	FilePoliciesService_MovePositionFilePolicy_FullMethodName = "/storage.FilePoliciesService/MovePositionFilePolicy"
	FilePoliciesService_FilePolicyApply_FullMethodName        = "/storage.FilePoliciesService/FilePolicyApply"
)

// FilePoliciesServiceClient is the client API for FilePoliciesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilePoliciesServiceClient interface {
	// Create FilePolicy
	CreateFilePolicy(ctx context.Context, in *CreateFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error)
	// List of FilePolicy
	SearchFilePolicies(ctx context.Context, in *SearchFilePoliciesRequest, opts ...grpc.CallOption) (*ListFilePolicies, error)
	// FilePolicy item
	ReadFilePolicy(ctx context.Context, in *ReadFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error)
	// Update FilePolicy
	UpdateFilePolicy(ctx context.Context, in *UpdateFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error)
	// Patch FilePolicy
	PatchFilePolicy(ctx context.Context, in *PatchFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error)
	// Remove FilePolicy
	DeleteFilePolicy(ctx context.Context, in *DeleteFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error)
	MovePositionFilePolicy(ctx context.Context, in *MovePositionFilePolicyRequest, opts ...grpc.CallOption) (*MovePositionFilePolicyResponse, error)
	FilePolicyApply(ctx context.Context, in *FilePolicyApplyRequest, opts ...grpc.CallOption) (*FilePolicyApplyResponse, error)
}

type filePoliciesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilePoliciesServiceClient(cc grpc.ClientConnInterface) FilePoliciesServiceClient {
	return &filePoliciesServiceClient{cc}
}

func (c *filePoliciesServiceClient) CreateFilePolicy(ctx context.Context, in *CreateFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error) {
	out := new(FilePolicy)
	err := c.cc.Invoke(ctx, FilePoliciesService_CreateFilePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoliciesServiceClient) SearchFilePolicies(ctx context.Context, in *SearchFilePoliciesRequest, opts ...grpc.CallOption) (*ListFilePolicies, error) {
	out := new(ListFilePolicies)
	err := c.cc.Invoke(ctx, FilePoliciesService_SearchFilePolicies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoliciesServiceClient) ReadFilePolicy(ctx context.Context, in *ReadFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error) {
	out := new(FilePolicy)
	err := c.cc.Invoke(ctx, FilePoliciesService_ReadFilePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoliciesServiceClient) UpdateFilePolicy(ctx context.Context, in *UpdateFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error) {
	out := new(FilePolicy)
	err := c.cc.Invoke(ctx, FilePoliciesService_UpdateFilePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoliciesServiceClient) PatchFilePolicy(ctx context.Context, in *PatchFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error) {
	out := new(FilePolicy)
	err := c.cc.Invoke(ctx, FilePoliciesService_PatchFilePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoliciesServiceClient) DeleteFilePolicy(ctx context.Context, in *DeleteFilePolicyRequest, opts ...grpc.CallOption) (*FilePolicy, error) {
	out := new(FilePolicy)
	err := c.cc.Invoke(ctx, FilePoliciesService_DeleteFilePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoliciesServiceClient) MovePositionFilePolicy(ctx context.Context, in *MovePositionFilePolicyRequest, opts ...grpc.CallOption) (*MovePositionFilePolicyResponse, error) {
	out := new(MovePositionFilePolicyResponse)
	err := c.cc.Invoke(ctx, FilePoliciesService_MovePositionFilePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filePoliciesServiceClient) FilePolicyApply(ctx context.Context, in *FilePolicyApplyRequest, opts ...grpc.CallOption) (*FilePolicyApplyResponse, error) {
	out := new(FilePolicyApplyResponse)
	err := c.cc.Invoke(ctx, FilePoliciesService_FilePolicyApply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilePoliciesServiceServer is the server API for FilePoliciesService service.
// All implementations must embed UnimplementedFilePoliciesServiceServer
// for forward compatibility
type FilePoliciesServiceServer interface {
	// Create FilePolicy
	CreateFilePolicy(context.Context, *CreateFilePolicyRequest) (*FilePolicy, error)
	// List of FilePolicy
	SearchFilePolicies(context.Context, *SearchFilePoliciesRequest) (*ListFilePolicies, error)
	// FilePolicy item
	ReadFilePolicy(context.Context, *ReadFilePolicyRequest) (*FilePolicy, error)
	// Update FilePolicy
	UpdateFilePolicy(context.Context, *UpdateFilePolicyRequest) (*FilePolicy, error)
	// Patch FilePolicy
	PatchFilePolicy(context.Context, *PatchFilePolicyRequest) (*FilePolicy, error)
	// Remove FilePolicy
	DeleteFilePolicy(context.Context, *DeleteFilePolicyRequest) (*FilePolicy, error)
	MovePositionFilePolicy(context.Context, *MovePositionFilePolicyRequest) (*MovePositionFilePolicyResponse, error)
	FilePolicyApply(context.Context, *FilePolicyApplyRequest) (*FilePolicyApplyResponse, error)
	mustEmbedUnimplementedFilePoliciesServiceServer()
}

// UnimplementedFilePoliciesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilePoliciesServiceServer struct {
}

func (UnimplementedFilePoliciesServiceServer) CreateFilePolicy(context.Context, *CreateFilePolicyRequest) (*FilePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilePolicy not implemented")
}
func (UnimplementedFilePoliciesServiceServer) SearchFilePolicies(context.Context, *SearchFilePoliciesRequest) (*ListFilePolicies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFilePolicies not implemented")
}
func (UnimplementedFilePoliciesServiceServer) ReadFilePolicy(context.Context, *ReadFilePolicyRequest) (*FilePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFilePolicy not implemented")
}
func (UnimplementedFilePoliciesServiceServer) UpdateFilePolicy(context.Context, *UpdateFilePolicyRequest) (*FilePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilePolicy not implemented")
}
func (UnimplementedFilePoliciesServiceServer) PatchFilePolicy(context.Context, *PatchFilePolicyRequest) (*FilePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchFilePolicy not implemented")
}
func (UnimplementedFilePoliciesServiceServer) DeleteFilePolicy(context.Context, *DeleteFilePolicyRequest) (*FilePolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilePolicy not implemented")
}
func (UnimplementedFilePoliciesServiceServer) MovePositionFilePolicy(context.Context, *MovePositionFilePolicyRequest) (*MovePositionFilePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePositionFilePolicy not implemented")
}
func (UnimplementedFilePoliciesServiceServer) FilePolicyApply(context.Context, *FilePolicyApplyRequest) (*FilePolicyApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilePolicyApply not implemented")
}
func (UnimplementedFilePoliciesServiceServer) mustEmbedUnimplementedFilePoliciesServiceServer() {}

// UnsafeFilePoliciesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilePoliciesServiceServer will
// result in compilation errors.
type UnsafeFilePoliciesServiceServer interface {
	mustEmbedUnimplementedFilePoliciesServiceServer()
}

func RegisterFilePoliciesServiceServer(s grpc.ServiceRegistrar, srv FilePoliciesServiceServer) {
	s.RegisterService(&FilePoliciesService_ServiceDesc, srv)
}

func _FilePoliciesService_CreateFilePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoliciesServiceServer).CreateFilePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoliciesService_CreateFilePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoliciesServiceServer).CreateFilePolicy(ctx, req.(*CreateFilePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoliciesService_SearchFilePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFilePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoliciesServiceServer).SearchFilePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoliciesService_SearchFilePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoliciesServiceServer).SearchFilePolicies(ctx, req.(*SearchFilePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoliciesService_ReadFilePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFilePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoliciesServiceServer).ReadFilePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoliciesService_ReadFilePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoliciesServiceServer).ReadFilePolicy(ctx, req.(*ReadFilePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoliciesService_UpdateFilePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoliciesServiceServer).UpdateFilePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoliciesService_UpdateFilePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoliciesServiceServer).UpdateFilePolicy(ctx, req.(*UpdateFilePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoliciesService_PatchFilePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchFilePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoliciesServiceServer).PatchFilePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoliciesService_PatchFilePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoliciesServiceServer).PatchFilePolicy(ctx, req.(*PatchFilePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoliciesService_DeleteFilePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoliciesServiceServer).DeleteFilePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoliciesService_DeleteFilePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoliciesServiceServer).DeleteFilePolicy(ctx, req.(*DeleteFilePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoliciesService_MovePositionFilePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovePositionFilePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoliciesServiceServer).MovePositionFilePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoliciesService_MovePositionFilePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoliciesServiceServer).MovePositionFilePolicy(ctx, req.(*MovePositionFilePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilePoliciesService_FilePolicyApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePolicyApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilePoliciesServiceServer).FilePolicyApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilePoliciesService_FilePolicyApply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilePoliciesServiceServer).FilePolicyApply(ctx, req.(*FilePolicyApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilePoliciesService_ServiceDesc is the grpc.ServiceDesc for FilePoliciesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilePoliciesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.FilePoliciesService",
	HandlerType: (*FilePoliciesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFilePolicy",
			Handler:    _FilePoliciesService_CreateFilePolicy_Handler,
		},
		{
			MethodName: "SearchFilePolicies",
			Handler:    _FilePoliciesService_SearchFilePolicies_Handler,
		},
		{
			MethodName: "ReadFilePolicy",
			Handler:    _FilePoliciesService_ReadFilePolicy_Handler,
		},
		{
			MethodName: "UpdateFilePolicy",
			Handler:    _FilePoliciesService_UpdateFilePolicy_Handler,
		},
		{
			MethodName: "PatchFilePolicy",
			Handler:    _FilePoliciesService_PatchFilePolicy_Handler,
		},
		{
			MethodName: "DeleteFilePolicy",
			Handler:    _FilePoliciesService_DeleteFilePolicy_Handler,
		},
		{
			MethodName: "MovePositionFilePolicy",
			Handler:    _FilePoliciesService_MovePositionFilePolicy_Handler,
		},
		{
			MethodName: "FilePolicyApply",
			Handler:    _FilePoliciesService_FilePolicyApply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_policies.proto",
}
