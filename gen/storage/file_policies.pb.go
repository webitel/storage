// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: file_policies.proto

package storage

import (
	engine "github.com/webitel/storage/gen/engine"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilePolicyApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplyToNullChannel bool  `protobuf:"varint,2,opt,name=apply_to_null_channel,json=applyToNullChannel,proto3" json:"apply_to_null_channel,omitempty"`
}

func (x *FilePolicyApplyRequest) Reset() {
	*x = FilePolicyApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePolicyApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePolicyApplyRequest) ProtoMessage() {}

func (x *FilePolicyApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePolicyApplyRequest.ProtoReflect.Descriptor instead.
func (*FilePolicyApplyRequest) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{0}
}

func (x *FilePolicyApplyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilePolicyApplyRequest) GetApplyToNullChannel() bool {
	if x != nil {
		return x.ApplyToNullChannel
	}
	return false
}

type FilePolicyApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *FilePolicyApplyResponse) Reset() {
	*x = FilePolicyApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePolicyApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePolicyApplyResponse) ProtoMessage() {}

func (x *FilePolicyApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePolicyApplyResponse.ProtoReflect.Descriptor instead.
func (*FilePolicyApplyResponse) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{1}
}

func (x *FilePolicyApplyResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FilePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt     int64               `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy     *engine.Lookup      `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt     int64               `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy     *engine.Lookup      `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Name          string              `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Enabled       bool                `protobuf:"varint,7,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MimeTypes     []string            `protobuf:"bytes,8,rep,name=mime_types,json=mimeTypes,proto3" json:"mime_types,omitempty"`
	SpeedDownload int64               `protobuf:"varint,9,opt,name=speed_download,json=speedDownload,proto3" json:"speed_download,omitempty"`
	SpeedUpload   int64               `protobuf:"varint,10,opt,name=speed_upload,json=speedUpload,proto3" json:"speed_upload,omitempty"`
	Description   string              `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Channels      []UploadFileChannel `protobuf:"varint,12,rep,packed,name=channels,proto3,enum=storage.UploadFileChannel" json:"channels,omitempty"`
	RetentionDays int32               `protobuf:"varint,13,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	Position      int32               `protobuf:"varint,14,opt,name=position,proto3" json:"position,omitempty"`
	MaxUploadSize int64               `protobuf:"varint,15,opt,name=max_upload_size,json=maxUploadSize,proto3" json:"max_upload_size,omitempty"`
	Encrypt       bool                `protobuf:"varint,16,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
}

func (x *FilePolicy) Reset() {
	*x = FilePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePolicy) ProtoMessage() {}

func (x *FilePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePolicy.ProtoReflect.Descriptor instead.
func (*FilePolicy) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{2}
}

func (x *FilePolicy) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilePolicy) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FilePolicy) GetCreatedBy() *engine.Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *FilePolicy) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *FilePolicy) GetUpdatedBy() *engine.Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *FilePolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FilePolicy) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FilePolicy) GetMimeTypes() []string {
	if x != nil {
		return x.MimeTypes
	}
	return nil
}

func (x *FilePolicy) GetSpeedDownload() int64 {
	if x != nil {
		return x.SpeedDownload
	}
	return 0
}

func (x *FilePolicy) GetSpeedUpload() int64 {
	if x != nil {
		return x.SpeedUpload
	}
	return 0
}

func (x *FilePolicy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FilePolicy) GetChannels() []UploadFileChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *FilePolicy) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *FilePolicy) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *FilePolicy) GetMaxUploadSize() int64 {
	if x != nil {
		return x.MaxUploadSize
	}
	return 0
}

func (x *FilePolicy) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

type CreateFilePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled       bool                `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MimeTypes     []string            `protobuf:"bytes,3,rep,name=mime_types,json=mimeTypes,proto3" json:"mime_types,omitempty"`
	SpeedDownload int64               `protobuf:"varint,4,opt,name=speed_download,json=speedDownload,proto3" json:"speed_download,omitempty"`
	SpeedUpload   int64               `protobuf:"varint,5,opt,name=speed_upload,json=speedUpload,proto3" json:"speed_upload,omitempty"`
	Description   string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Channels      []UploadFileChannel `protobuf:"varint,7,rep,packed,name=channels,proto3,enum=storage.UploadFileChannel" json:"channels,omitempty"`
	RetentionDays int32               `protobuf:"varint,8,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	MaxUploadSize int64               `protobuf:"varint,9,opt,name=max_upload_size,json=maxUploadSize,proto3" json:"max_upload_size,omitempty"`
	Encrypt       bool                `protobuf:"varint,10,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
}

func (x *CreateFilePolicyRequest) Reset() {
	*x = CreateFilePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFilePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFilePolicyRequest) ProtoMessage() {}

func (x *CreateFilePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFilePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreateFilePolicyRequest) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFilePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFilePolicyRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CreateFilePolicyRequest) GetMimeTypes() []string {
	if x != nil {
		return x.MimeTypes
	}
	return nil
}

func (x *CreateFilePolicyRequest) GetSpeedDownload() int64 {
	if x != nil {
		return x.SpeedDownload
	}
	return 0
}

func (x *CreateFilePolicyRequest) GetSpeedUpload() int64 {
	if x != nil {
		return x.SpeedUpload
	}
	return 0
}

func (x *CreateFilePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateFilePolicyRequest) GetChannels() []UploadFileChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *CreateFilePolicyRequest) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *CreateFilePolicyRequest) GetMaxUploadSize() int64 {
	if x != nil {
		return x.MaxUploadSize
	}
	return 0
}

func (x *CreateFilePolicyRequest) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

type ListFilePolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool          `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*FilePolicy `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListFilePolicies) Reset() {
	*x = ListFilePolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilePolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilePolicies) ProtoMessage() {}

func (x *ListFilePolicies) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilePolicies.ProtoReflect.Descriptor instead.
func (*ListFilePolicies) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{4}
}

func (x *ListFilePolicies) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListFilePolicies) GetItems() []*FilePolicy {
	if x != nil {
		return x.Items
	}
	return nil
}

type SearchFilePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size   int32    `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q      string   `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort   string   `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Id     []uint32 `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *SearchFilePoliciesRequest) Reset() {
	*x = SearchFilePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFilePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFilePoliciesRequest) ProtoMessage() {}

func (x *SearchFilePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFilePoliciesRequest.ProtoReflect.Descriptor instead.
func (*SearchFilePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{5}
}

func (x *SearchFilePoliciesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchFilePoliciesRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchFilePoliciesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchFilePoliciesRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchFilePoliciesRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchFilePoliciesRequest) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type ReadFilePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadFilePolicyRequest) Reset() {
	*x = ReadFilePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadFilePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFilePolicyRequest) ProtoMessage() {}

func (x *ReadFilePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFilePolicyRequest.ProtoReflect.Descriptor instead.
func (*ReadFilePolicyRequest) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{6}
}

func (x *ReadFilePolicyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateFilePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enabled       bool                `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MimeTypes     []string            `protobuf:"bytes,4,rep,name=mime_types,json=mimeTypes,proto3" json:"mime_types,omitempty"`
	SpeedDownload int64               `protobuf:"varint,5,opt,name=speed_download,json=speedDownload,proto3" json:"speed_download,omitempty"`
	SpeedUpload   int64               `protobuf:"varint,6,opt,name=speed_upload,json=speedUpload,proto3" json:"speed_upload,omitempty"`
	Description   string              `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Channels      []UploadFileChannel `protobuf:"varint,8,rep,packed,name=channels,proto3,enum=storage.UploadFileChannel" json:"channels,omitempty"`
	RetentionDays int32               `protobuf:"varint,9,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	MaxUploadSize int64               `protobuf:"varint,10,opt,name=max_upload_size,json=maxUploadSize,proto3" json:"max_upload_size,omitempty"`
	Encrypt       bool                `protobuf:"varint,11,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
}

func (x *UpdateFilePolicyRequest) Reset() {
	*x = UpdateFilePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFilePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFilePolicyRequest) ProtoMessage() {}

func (x *UpdateFilePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFilePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdateFilePolicyRequest) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFilePolicyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateFilePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateFilePolicyRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdateFilePolicyRequest) GetMimeTypes() []string {
	if x != nil {
		return x.MimeTypes
	}
	return nil
}

func (x *UpdateFilePolicyRequest) GetSpeedDownload() int64 {
	if x != nil {
		return x.SpeedDownload
	}
	return 0
}

func (x *UpdateFilePolicyRequest) GetSpeedUpload() int64 {
	if x != nil {
		return x.SpeedUpload
	}
	return 0
}

func (x *UpdateFilePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateFilePolicyRequest) GetChannels() []UploadFileChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *UpdateFilePolicyRequest) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *UpdateFilePolicyRequest) GetMaxUploadSize() int64 {
	if x != nil {
		return x.MaxUploadSize
	}
	return 0
}

func (x *UpdateFilePolicyRequest) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

type PatchFilePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields        []string            `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Id            int32               `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name          string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Enabled       bool                `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MimeTypes     []string            `protobuf:"bytes,5,rep,name=mime_types,json=mimeTypes,proto3" json:"mime_types,omitempty"`
	SpeedDownload int64               `protobuf:"varint,6,opt,name=speed_download,json=speedDownload,proto3" json:"speed_download,omitempty"`
	SpeedUpload   int64               `protobuf:"varint,7,opt,name=speed_upload,json=speedUpload,proto3" json:"speed_upload,omitempty"`
	Description   string              `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Channels      []UploadFileChannel `protobuf:"varint,9,rep,packed,name=channels,proto3,enum=storage.UploadFileChannel" json:"channels,omitempty"`
	RetentionDays int32               `protobuf:"varint,10,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	MaxUploadSize int64               `protobuf:"varint,11,opt,name=max_upload_size,json=maxUploadSize,proto3" json:"max_upload_size,omitempty"`
	Encrypt       bool                `protobuf:"varint,12,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
}

func (x *PatchFilePolicyRequest) Reset() {
	*x = PatchFilePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchFilePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchFilePolicyRequest) ProtoMessage() {}

func (x *PatchFilePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchFilePolicyRequest.ProtoReflect.Descriptor instead.
func (*PatchFilePolicyRequest) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{8}
}

func (x *PatchFilePolicyRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PatchFilePolicyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PatchFilePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchFilePolicyRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PatchFilePolicyRequest) GetMimeTypes() []string {
	if x != nil {
		return x.MimeTypes
	}
	return nil
}

func (x *PatchFilePolicyRequest) GetSpeedDownload() int64 {
	if x != nil {
		return x.SpeedDownload
	}
	return 0
}

func (x *PatchFilePolicyRequest) GetSpeedUpload() int64 {
	if x != nil {
		return x.SpeedUpload
	}
	return 0
}

func (x *PatchFilePolicyRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PatchFilePolicyRequest) GetChannels() []UploadFileChannel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *PatchFilePolicyRequest) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *PatchFilePolicyRequest) GetMaxUploadSize() int64 {
	if x != nil {
		return x.MaxUploadSize
	}
	return 0
}

func (x *PatchFilePolicyRequest) GetEncrypt() bool {
	if x != nil {
		return x.Encrypt
	}
	return false
}

type DeleteFilePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFilePolicyRequest) Reset() {
	*x = DeleteFilePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFilePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFilePolicyRequest) ProtoMessage() {}

func (x *DeleteFilePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFilePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteFilePolicyRequest) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteFilePolicyRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MovePositionFilePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromId int32 `protobuf:"varint,1,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	ToId   int32 `protobuf:"varint,2,opt,name=to_id,json=toId,proto3" json:"to_id,omitempty"`
}

func (x *MovePositionFilePolicyRequest) Reset() {
	*x = MovePositionFilePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovePositionFilePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovePositionFilePolicyRequest) ProtoMessage() {}

func (x *MovePositionFilePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovePositionFilePolicyRequest.ProtoReflect.Descriptor instead.
func (*MovePositionFilePolicyRequest) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{10}
}

func (x *MovePositionFilePolicyRequest) GetFromId() int32 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *MovePositionFilePolicyRequest) GetToId() int32 {
	if x != nil {
		return x.ToId
	}
	return 0
}

type MovePositionFilePolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *MovePositionFilePolicyResponse) Reset() {
	*x = MovePositionFilePolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_file_policies_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovePositionFilePolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovePositionFilePolicyResponse) ProtoMessage() {}

func (x *MovePositionFilePolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_policies_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovePositionFilePolicyResponse.ProtoReflect.Descriptor instead.
func (*MovePositionFilePolicyResponse) Descriptor() ([]byte, []int) {
	return file_file_policies_proto_rawDescGZIP(), []int{11}
}

func (x *MovePositionFilePolicyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_file_policies_proto protoreflect.FileDescriptor

var file_file_policies_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x1a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x31, 0x0a, 0x15, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x2f, 0x0a, 0x17, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xae, 0x04, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x64, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x79, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0x51, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65,
	0x78, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x19, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a,
	0x15, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x03, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0x9a, 0x03, 0x0a,
	0x16, 0x50, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22, 0x29, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x1d, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x6f, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32,
	0xe1, 0x07, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x6a, 0x0a, 0x0e, 0x52, 0x65,
	0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x71, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x1a, 0x1b, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6f, 0x0a, 0x0f, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x32, 0x1b, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa1, 0x01, 0x0a, 0x16, 0x4d,
	0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01,
	0x2a, 0x32, 0x2b, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x6f, 0x2f, 0x7b, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x82,
	0x01, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a,
	0x32, 0x21, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x42, 0x7f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x42, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0xa2, 0x02, 0x03, 0x53, 0x58, 0x58,
	0xaa, 0x02, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0xca, 0x02, 0x07, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0xe2, 0x02, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x07, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_file_policies_proto_rawDescOnce sync.Once
	file_file_policies_proto_rawDescData = file_file_policies_proto_rawDesc
)

func file_file_policies_proto_rawDescGZIP() []byte {
	file_file_policies_proto_rawDescOnce.Do(func() {
		file_file_policies_proto_rawDescData = protoimpl.X.CompressGZIP(file_file_policies_proto_rawDescData)
	})
	return file_file_policies_proto_rawDescData
}

var file_file_policies_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_file_policies_proto_goTypes = []interface{}{
	(*FilePolicyApplyRequest)(nil),         // 0: storage.FilePolicyApplyRequest
	(*FilePolicyApplyResponse)(nil),        // 1: storage.FilePolicyApplyResponse
	(*FilePolicy)(nil),                     // 2: storage.FilePolicy
	(*CreateFilePolicyRequest)(nil),        // 3: storage.CreateFilePolicyRequest
	(*ListFilePolicies)(nil),               // 4: storage.ListFilePolicies
	(*SearchFilePoliciesRequest)(nil),      // 5: storage.SearchFilePoliciesRequest
	(*ReadFilePolicyRequest)(nil),          // 6: storage.ReadFilePolicyRequest
	(*UpdateFilePolicyRequest)(nil),        // 7: storage.UpdateFilePolicyRequest
	(*PatchFilePolicyRequest)(nil),         // 8: storage.PatchFilePolicyRequest
	(*DeleteFilePolicyRequest)(nil),        // 9: storage.DeleteFilePolicyRequest
	(*MovePositionFilePolicyRequest)(nil),  // 10: storage.MovePositionFilePolicyRequest
	(*MovePositionFilePolicyResponse)(nil), // 11: storage.MovePositionFilePolicyResponse
	(*engine.Lookup)(nil),                  // 12: engine.Lookup
	(UploadFileChannel)(0),                 // 13: storage.UploadFileChannel
}
var file_file_policies_proto_depIdxs = []int32{
	12, // 0: storage.FilePolicy.created_by:type_name -> engine.Lookup
	12, // 1: storage.FilePolicy.updated_by:type_name -> engine.Lookup
	13, // 2: storage.FilePolicy.channels:type_name -> storage.UploadFileChannel
	13, // 3: storage.CreateFilePolicyRequest.channels:type_name -> storage.UploadFileChannel
	2,  // 4: storage.ListFilePolicies.items:type_name -> storage.FilePolicy
	13, // 5: storage.UpdateFilePolicyRequest.channels:type_name -> storage.UploadFileChannel
	13, // 6: storage.PatchFilePolicyRequest.channels:type_name -> storage.UploadFileChannel
	3,  // 7: storage.FilePoliciesService.CreateFilePolicy:input_type -> storage.CreateFilePolicyRequest
	5,  // 8: storage.FilePoliciesService.SearchFilePolicies:input_type -> storage.SearchFilePoliciesRequest
	6,  // 9: storage.FilePoliciesService.ReadFilePolicy:input_type -> storage.ReadFilePolicyRequest
	7,  // 10: storage.FilePoliciesService.UpdateFilePolicy:input_type -> storage.UpdateFilePolicyRequest
	8,  // 11: storage.FilePoliciesService.PatchFilePolicy:input_type -> storage.PatchFilePolicyRequest
	9,  // 12: storage.FilePoliciesService.DeleteFilePolicy:input_type -> storage.DeleteFilePolicyRequest
	10, // 13: storage.FilePoliciesService.MovePositionFilePolicy:input_type -> storage.MovePositionFilePolicyRequest
	0,  // 14: storage.FilePoliciesService.FilePolicyApply:input_type -> storage.FilePolicyApplyRequest
	2,  // 15: storage.FilePoliciesService.CreateFilePolicy:output_type -> storage.FilePolicy
	4,  // 16: storage.FilePoliciesService.SearchFilePolicies:output_type -> storage.ListFilePolicies
	2,  // 17: storage.FilePoliciesService.ReadFilePolicy:output_type -> storage.FilePolicy
	2,  // 18: storage.FilePoliciesService.UpdateFilePolicy:output_type -> storage.FilePolicy
	2,  // 19: storage.FilePoliciesService.PatchFilePolicy:output_type -> storage.FilePolicy
	2,  // 20: storage.FilePoliciesService.DeleteFilePolicy:output_type -> storage.FilePolicy
	11, // 21: storage.FilePoliciesService.MovePositionFilePolicy:output_type -> storage.MovePositionFilePolicyResponse
	1,  // 22: storage.FilePoliciesService.FilePolicyApply:output_type -> storage.FilePolicyApplyResponse
	15, // [15:23] is the sub-list for method output_type
	7,  // [7:15] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_file_policies_proto_init() }
func file_file_policies_proto_init() {
	if File_file_policies_proto != nil {
		return
	}
	file_file_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_file_policies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilePolicyApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilePolicyApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFilePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilePolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFilePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadFilePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFilePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchFilePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFilePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovePositionFilePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_file_policies_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovePositionFilePolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_file_policies_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_file_policies_proto_goTypes,
		DependencyIndexes: file_file_policies_proto_depIdxs,
		MessageInfos:      file_file_policies_proto_msgTypes,
	}.Build()
	File_file_policies_proto = out.File
	file_file_policies_proto_rawDesc = nil
	file_file_policies_proto_goTypes = nil
	file_file_policies_proto_depIdxs = nil
}
