// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: cognitive_profile.proto

package storage

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	engine "github.com/webitel/storage/gen/engine"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceType int32

const (
	ServiceType_DefaultService ServiceType = 0
	ServiceType_STT            ServiceType = 1
	ServiceType_TTS            ServiceType = 2
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "DefaultService",
		1: "STT",
		2: "TTS",
	}
	ServiceType_value = map[string]int32{
		"DefaultService": 0,
		"STT":            1,
		"TTS":            2,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_cognitive_profile_proto_enumTypes[0].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_cognitive_profile_proto_enumTypes[0]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{0}
}

type ProviderType int32

const (
	ProviderType_DefaultProvider ProviderType = 0
	ProviderType_Microsoft       ProviderType = 1
	ProviderType_Google          ProviderType = 2
	ProviderType_ElevenLabs      ProviderType = 3
)

// Enum value maps for ProviderType.
var (
	ProviderType_name = map[int32]string{
		0: "DefaultProvider",
		1: "Microsoft",
		2: "Google",
		3: "ElevenLabs",
	}
	ProviderType_value = map[string]int32{
		"DefaultProvider": 0,
		"Microsoft":       1,
		"Google":          2,
		"ElevenLabs":      3,
	}
)

func (x ProviderType) Enum() *ProviderType {
	p := new(ProviderType)
	*p = x
	return p
}

func (x ProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_cognitive_profile_proto_enumTypes[1].Descriptor()
}

func (ProviderType) Type() protoreflect.EnumType {
	return &file_cognitive_profile_proto_enumTypes[1]
}

func (x ProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProviderType.Descriptor instead.
func (ProviderType) EnumDescriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{1}
}

type CognitiveProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt   int64           `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CreatedBy   *engine.Lookup  `protobuf:"bytes,3,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedAt   int64           `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedBy   *engine.Lookup  `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	Provider    ProviderType    `protobuf:"varint,6,opt,name=provider,proto3,enum=storage.ProviderType" json:"provider,omitempty"`
	Properties  *structpb.Value `protobuf:"bytes,7,opt,name=properties,proto3" json:"properties,omitempty"`
	Enabled     bool            `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name        string          `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	Service     ServiceType     `protobuf:"varint,11,opt,name=service,proto3,enum=storage.ServiceType" json:"service,omitempty"`
	Default     bool            `protobuf:"varint,12,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *CognitiveProfile) Reset() {
	*x = CognitiveProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CognitiveProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CognitiveProfile) ProtoMessage() {}

func (x *CognitiveProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CognitiveProfile.ProtoReflect.Descriptor instead.
func (*CognitiveProfile) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{0}
}

func (x *CognitiveProfile) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CognitiveProfile) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CognitiveProfile) GetCreatedBy() *engine.Lookup {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *CognitiveProfile) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *CognitiveProfile) GetUpdatedBy() *engine.Lookup {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (x *CognitiveProfile) GetProvider() ProviderType {
	if x != nil {
		return x.Provider
	}
	return ProviderType_DefaultProvider
}

func (x *CognitiveProfile) GetProperties() *structpb.Value {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *CognitiveProfile) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CognitiveProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CognitiveProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CognitiveProfile) GetService() ServiceType {
	if x != nil {
		return x.Service
	}
	return ServiceType_DefaultService
}

func (x *CognitiveProfile) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type CognitiveProfileVoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,13,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CognitiveProfileVoice) Reset() {
	*x = CognitiveProfileVoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CognitiveProfileVoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CognitiveProfileVoice) ProtoMessage() {}

func (x *CognitiveProfileVoice) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CognitiveProfileVoice.ProtoReflect.Descriptor instead.
func (*CognitiveProfileVoice) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{1}
}

func (x *CognitiveProfileVoice) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CognitiveProfileVoice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateCognitiveProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider    ProviderType    `protobuf:"varint,1,opt,name=provider,proto3,enum=storage.ProviderType" json:"provider,omitempty"`
	Properties  *structpb.Value `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	Enabled     bool            `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name        string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Service     ServiceType     `protobuf:"varint,6,opt,name=service,proto3,enum=storage.ServiceType" json:"service,omitempty"`
	Default     bool            `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *CreateCognitiveProfileRequest) Reset() {
	*x = CreateCognitiveProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCognitiveProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCognitiveProfileRequest) ProtoMessage() {}

func (x *CreateCognitiveProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCognitiveProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateCognitiveProfileRequest) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCognitiveProfileRequest) GetProvider() ProviderType {
	if x != nil {
		return x.Provider
	}
	return ProviderType_DefaultProvider
}

func (x *CreateCognitiveProfileRequest) GetProperties() *structpb.Value {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *CreateCognitiveProfileRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CreateCognitiveProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCognitiveProfileRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCognitiveProfileRequest) GetService() ServiceType {
	if x != nil {
		return x.Service
	}
	return ServiceType_DefaultService
}

func (x *CreateCognitiveProfileRequest) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type SearchCognitiveProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page    int32         `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size    int32         `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Q       string        `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Sort    string        `protobuf:"bytes,4,opt,name=sort,proto3" json:"sort,omitempty"`
	Fields  []string      `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	Id      []int64       `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
	Service []ServiceType `protobuf:"varint,7,rep,packed,name=service,proto3,enum=storage.ServiceType" json:"service,omitempty"`
	Enabled bool          `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SearchCognitiveProfileRequest) Reset() {
	*x = SearchCognitiveProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCognitiveProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCognitiveProfileRequest) ProtoMessage() {}

func (x *SearchCognitiveProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCognitiveProfileRequest.ProtoReflect.Descriptor instead.
func (*SearchCognitiveProfileRequest) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{3}
}

func (x *SearchCognitiveProfileRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SearchCognitiveProfileRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *SearchCognitiveProfileRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchCognitiveProfileRequest) GetSort() string {
	if x != nil {
		return x.Sort
	}
	return ""
}

func (x *SearchCognitiveProfileRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchCognitiveProfileRequest) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SearchCognitiveProfileRequest) GetService() []ServiceType {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *SearchCognitiveProfileRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ListCognitiveProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next  bool                `protobuf:"varint,1,opt,name=next,proto3" json:"next,omitempty"`
	Items []*CognitiveProfile `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCognitiveProfile) Reset() {
	*x = ListCognitiveProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCognitiveProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCognitiveProfile) ProtoMessage() {}

func (x *ListCognitiveProfile) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCognitiveProfile.ProtoReflect.Descriptor instead.
func (*ListCognitiveProfile) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{4}
}

func (x *ListCognitiveProfile) GetNext() bool {
	if x != nil {
		return x.Next
	}
	return false
}

func (x *ListCognitiveProfile) GetItems() []*CognitiveProfile {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReadCognitiveProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadCognitiveProfileRequest) Reset() {
	*x = ReadCognitiveProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadCognitiveProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadCognitiveProfileRequest) ProtoMessage() {}

func (x *ReadCognitiveProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadCognitiveProfileRequest.ProtoReflect.Descriptor instead.
func (*ReadCognitiveProfileRequest) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{5}
}

func (x *ReadCognitiveProfileRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateCognitiveProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider    ProviderType    `protobuf:"varint,2,opt,name=provider,proto3,enum=storage.ProviderType" json:"provider,omitempty"`
	Properties  *structpb.Value `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
	Enabled     bool            `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name        string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Service     ServiceType     `protobuf:"varint,7,opt,name=service,proto3,enum=storage.ServiceType" json:"service,omitempty"`
	Default     bool            `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
}

func (x *UpdateCognitiveProfileRequest) Reset() {
	*x = UpdateCognitiveProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCognitiveProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCognitiveProfileRequest) ProtoMessage() {}

func (x *UpdateCognitiveProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCognitiveProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateCognitiveProfileRequest) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCognitiveProfileRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCognitiveProfileRequest) GetProvider() ProviderType {
	if x != nil {
		return x.Provider
	}
	return ProviderType_DefaultProvider
}

func (x *UpdateCognitiveProfileRequest) GetProperties() *structpb.Value {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *UpdateCognitiveProfileRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UpdateCognitiveProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCognitiveProfileRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateCognitiveProfileRequest) GetService() ServiceType {
	if x != nil {
		return x.Service
	}
	return ServiceType_DefaultService
}

func (x *UpdateCognitiveProfileRequest) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

type PatchCognitiveProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Provider    ProviderType    `protobuf:"varint,2,opt,name=provider,proto3,enum=storage.ProviderType" json:"provider,omitempty"`
	Properties  *structpb.Value `protobuf:"bytes,3,opt,name=properties,proto3" json:"properties,omitempty"`
	Enabled     bool            `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Name        string          `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description string          `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Service     ServiceType     `protobuf:"varint,7,opt,name=service,proto3,enum=storage.ServiceType" json:"service,omitempty"`
	Default     bool            `protobuf:"varint,8,opt,name=default,proto3" json:"default,omitempty"`
	Fields      []string        `protobuf:"bytes,9,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *PatchCognitiveProfileRequest) Reset() {
	*x = PatchCognitiveProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchCognitiveProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchCognitiveProfileRequest) ProtoMessage() {}

func (x *PatchCognitiveProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchCognitiveProfileRequest.ProtoReflect.Descriptor instead.
func (*PatchCognitiveProfileRequest) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{7}
}

func (x *PatchCognitiveProfileRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PatchCognitiveProfileRequest) GetProvider() ProviderType {
	if x != nil {
		return x.Provider
	}
	return ProviderType_DefaultProvider
}

func (x *PatchCognitiveProfileRequest) GetProperties() *structpb.Value {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *PatchCognitiveProfileRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PatchCognitiveProfileRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PatchCognitiveProfileRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PatchCognitiveProfileRequest) GetService() ServiceType {
	if x != nil {
		return x.Service
	}
	return ServiceType_DefaultService
}

func (x *PatchCognitiveProfileRequest) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

func (x *PatchCognitiveProfileRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DeleteCognitiveProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCognitiveProfileRequest) Reset() {
	*x = DeleteCognitiveProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCognitiveProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCognitiveProfileRequest) ProtoMessage() {}

func (x *DeleteCognitiveProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCognitiveProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteCognitiveProfileRequest) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCognitiveProfileRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SearchCognitiveProfileVoicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q   string `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Id  int64  `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Key string `protobuf:"bytes,7,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SearchCognitiveProfileVoicesRequest) Reset() {
	*x = SearchCognitiveProfileVoicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCognitiveProfileVoicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCognitiveProfileVoicesRequest) ProtoMessage() {}

func (x *SearchCognitiveProfileVoicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCognitiveProfileVoicesRequest.ProtoReflect.Descriptor instead.
func (*SearchCognitiveProfileVoicesRequest) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{9}
}

func (x *SearchCognitiveProfileVoicesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchCognitiveProfileVoicesRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SearchCognitiveProfileVoicesRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ListCognitiveProfileVoices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*CognitiveProfileVoice `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListCognitiveProfileVoices) Reset() {
	*x = ListCognitiveProfileVoices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cognitive_profile_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCognitiveProfileVoices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCognitiveProfileVoices) ProtoMessage() {}

func (x *ListCognitiveProfileVoices) ProtoReflect() protoreflect.Message {
	mi := &file_cognitive_profile_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCognitiveProfileVoices.ProtoReflect.Descriptor instead.
func (*ListCognitiveProfileVoices) Descriptor() ([]byte, []int) {
	return file_cognitive_profile_proto_rawDescGZIP(), []int{10}
}

func (x *ListCognitiveProfileVoices) GetItems() []*CognitiveProfileVoice {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_cognitive_profile_proto protoreflect.FileDescriptor

var file_cognitive_profile_proto_rawDesc = []byte{
	0x0a, 0x17, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x1a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x03, 0x0a, 0x10,
	0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x31, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x22, 0x3b, 0x0a, 0x15, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb5,
	0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x8e, 0x01, 0x92, 0x41, 0x8a, 0x01, 0x0a, 0x87, 0x01, 0x2a,
	0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x32, 0x35, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x62, 0x6f, 0x64, 0x79, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x54, 0x54, 0x53, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x54, 0x54, 0x53, 0xd2, 0x01, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0xd2,
	0x01, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xd2, 0x01, 0x0a, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x5b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74,
	0x12, 0x2f, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x2d, 0x0a, 0x1b, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xb4, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0xcb, 0x02, 0x0a, 0x1c, 0x50, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x23, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x56, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a,
	0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x0a,
	0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x2a, 0x33, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x54, 0x53, 0x10, 0x02, 0x2a, 0x4e, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x6c, 0x65, 0x76, 0x65, 0x6e,
	0x4c, 0x61, 0x62, 0x73, 0x10, 0x03, 0x32, 0xea, 0x07, 0x0a, 0x17, 0x43, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x81, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0x88, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2e, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x1a, 0x20, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x86,
	0x01, 0x0a, 0x15, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x01, 0x2a, 0x32, 0x20, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0xa1, 0x01, 0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x2c, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x67,
	0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x73, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2f, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6f,
	0x69, 0x63, 0x65, 0x42, 0x83, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x42, 0x15, 0x43, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x21, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x65, 0x62, 0x69, 0x74, 0x65, 0x6c,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0xa2,
	0x02, 0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0xca,
	0x02, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0xe2, 0x02, 0x13, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cognitive_profile_proto_rawDescOnce sync.Once
	file_cognitive_profile_proto_rawDescData = file_cognitive_profile_proto_rawDesc
)

func file_cognitive_profile_proto_rawDescGZIP() []byte {
	file_cognitive_profile_proto_rawDescOnce.Do(func() {
		file_cognitive_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_cognitive_profile_proto_rawDescData)
	})
	return file_cognitive_profile_proto_rawDescData
}

var file_cognitive_profile_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cognitive_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cognitive_profile_proto_goTypes = []interface{}{
	(ServiceType)(0),                            // 0: storage.ServiceType
	(ProviderType)(0),                           // 1: storage.ProviderType
	(*CognitiveProfile)(nil),                    // 2: storage.CognitiveProfile
	(*CognitiveProfileVoice)(nil),               // 3: storage.CognitiveProfileVoice
	(*CreateCognitiveProfileRequest)(nil),       // 4: storage.CreateCognitiveProfileRequest
	(*SearchCognitiveProfileRequest)(nil),       // 5: storage.SearchCognitiveProfileRequest
	(*ListCognitiveProfile)(nil),                // 6: storage.ListCognitiveProfile
	(*ReadCognitiveProfileRequest)(nil),         // 7: storage.ReadCognitiveProfileRequest
	(*UpdateCognitiveProfileRequest)(nil),       // 8: storage.UpdateCognitiveProfileRequest
	(*PatchCognitiveProfileRequest)(nil),        // 9: storage.PatchCognitiveProfileRequest
	(*DeleteCognitiveProfileRequest)(nil),       // 10: storage.DeleteCognitiveProfileRequest
	(*SearchCognitiveProfileVoicesRequest)(nil), // 11: storage.SearchCognitiveProfileVoicesRequest
	(*ListCognitiveProfileVoices)(nil),          // 12: storage.ListCognitiveProfileVoices
	(*engine.Lookup)(nil),                       // 13: engine.Lookup
	(*structpb.Value)(nil),                      // 14: google.protobuf.Value
}
var file_cognitive_profile_proto_depIdxs = []int32{
	13, // 0: storage.CognitiveProfile.created_by:type_name -> engine.Lookup
	13, // 1: storage.CognitiveProfile.updated_by:type_name -> engine.Lookup
	1,  // 2: storage.CognitiveProfile.provider:type_name -> storage.ProviderType
	14, // 3: storage.CognitiveProfile.properties:type_name -> google.protobuf.Value
	0,  // 4: storage.CognitiveProfile.service:type_name -> storage.ServiceType
	1,  // 5: storage.CreateCognitiveProfileRequest.provider:type_name -> storage.ProviderType
	14, // 6: storage.CreateCognitiveProfileRequest.properties:type_name -> google.protobuf.Value
	0,  // 7: storage.CreateCognitiveProfileRequest.service:type_name -> storage.ServiceType
	0,  // 8: storage.SearchCognitiveProfileRequest.service:type_name -> storage.ServiceType
	2,  // 9: storage.ListCognitiveProfile.items:type_name -> storage.CognitiveProfile
	1,  // 10: storage.UpdateCognitiveProfileRequest.provider:type_name -> storage.ProviderType
	14, // 11: storage.UpdateCognitiveProfileRequest.properties:type_name -> google.protobuf.Value
	0,  // 12: storage.UpdateCognitiveProfileRequest.service:type_name -> storage.ServiceType
	1,  // 13: storage.PatchCognitiveProfileRequest.provider:type_name -> storage.ProviderType
	14, // 14: storage.PatchCognitiveProfileRequest.properties:type_name -> google.protobuf.Value
	0,  // 15: storage.PatchCognitiveProfileRequest.service:type_name -> storage.ServiceType
	3,  // 16: storage.ListCognitiveProfileVoices.items:type_name -> storage.CognitiveProfileVoice
	4,  // 17: storage.CognitiveProfileService.CreateCognitiveProfile:input_type -> storage.CreateCognitiveProfileRequest
	5,  // 18: storage.CognitiveProfileService.SearchCognitiveProfile:input_type -> storage.SearchCognitiveProfileRequest
	7,  // 19: storage.CognitiveProfileService.ReadCognitiveProfile:input_type -> storage.ReadCognitiveProfileRequest
	8,  // 20: storage.CognitiveProfileService.UpdateCognitiveProfile:input_type -> storage.UpdateCognitiveProfileRequest
	9,  // 21: storage.CognitiveProfileService.PatchCognitiveProfile:input_type -> storage.PatchCognitiveProfileRequest
	10, // 22: storage.CognitiveProfileService.DeleteCognitiveProfile:input_type -> storage.DeleteCognitiveProfileRequest
	11, // 23: storage.CognitiveProfileService.SearchCognitiveProfileVoices:input_type -> storage.SearchCognitiveProfileVoicesRequest
	2,  // 24: storage.CognitiveProfileService.CreateCognitiveProfile:output_type -> storage.CognitiveProfile
	6,  // 25: storage.CognitiveProfileService.SearchCognitiveProfile:output_type -> storage.ListCognitiveProfile
	2,  // 26: storage.CognitiveProfileService.ReadCognitiveProfile:output_type -> storage.CognitiveProfile
	2,  // 27: storage.CognitiveProfileService.UpdateCognitiveProfile:output_type -> storage.CognitiveProfile
	2,  // 28: storage.CognitiveProfileService.PatchCognitiveProfile:output_type -> storage.CognitiveProfile
	2,  // 29: storage.CognitiveProfileService.DeleteCognitiveProfile:output_type -> storage.CognitiveProfile
	12, // 30: storage.CognitiveProfileService.SearchCognitiveProfileVoices:output_type -> storage.ListCognitiveProfileVoices
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_cognitive_profile_proto_init() }
func file_cognitive_profile_proto_init() {
	if File_cognitive_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cognitive_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CognitiveProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CognitiveProfileVoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCognitiveProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCognitiveProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCognitiveProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadCognitiveProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCognitiveProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchCognitiveProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCognitiveProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCognitiveProfileVoicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cognitive_profile_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCognitiveProfileVoices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cognitive_profile_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cognitive_profile_proto_goTypes,
		DependencyIndexes: file_cognitive_profile_proto_depIdxs,
		EnumInfos:         file_cognitive_profile_proto_enumTypes,
		MessageInfos:      file_cognitive_profile_proto_msgTypes,
	}.Build()
	File_cognitive_profile_proto = out.File
	file_cognitive_profile_proto_rawDesc = nil
	file_cognitive_profile_proto_goTypes = nil
	file_cognitive_profile_proto_depIdxs = nil
}
