// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: import_template.proto

package storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImportTemplateService_CreateImportTemplate_FullMethodName = "/storage.ImportTemplateService/CreateImportTemplate"
	ImportTemplateService_SearchImportTemplate_FullMethodName = "/storage.ImportTemplateService/SearchImportTemplate"
	ImportTemplateService_ReadImportTemplate_FullMethodName   = "/storage.ImportTemplateService/ReadImportTemplate"
	ImportTemplateService_UpdateImportTemplate_FullMethodName = "/storage.ImportTemplateService/UpdateImportTemplate"
	ImportTemplateService_PatchImportTemplate_FullMethodName  = "/storage.ImportTemplateService/PatchImportTemplate"
	ImportTemplateService_DeleteImportTemplate_FullMethodName = "/storage.ImportTemplateService/DeleteImportTemplate"
)

// ImportTemplateServiceClient is the client API for ImportTemplateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImportTemplateServiceClient interface {
	CreateImportTemplate(ctx context.Context, in *CreateImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error)
	SearchImportTemplate(ctx context.Context, in *SearchImportTemplateRequest, opts ...grpc.CallOption) (*ListImportTemplate, error)
	ReadImportTemplate(ctx context.Context, in *ReadImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error)
	UpdateImportTemplate(ctx context.Context, in *UpdateImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error)
	PatchImportTemplate(ctx context.Context, in *PatchImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error)
	DeleteImportTemplate(ctx context.Context, in *DeleteImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error)
}

type importTemplateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImportTemplateServiceClient(cc grpc.ClientConnInterface) ImportTemplateServiceClient {
	return &importTemplateServiceClient{cc}
}

func (c *importTemplateServiceClient) CreateImportTemplate(ctx context.Context, in *CreateImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error) {
	out := new(ImportTemplate)
	err := c.cc.Invoke(ctx, ImportTemplateService_CreateImportTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importTemplateServiceClient) SearchImportTemplate(ctx context.Context, in *SearchImportTemplateRequest, opts ...grpc.CallOption) (*ListImportTemplate, error) {
	out := new(ListImportTemplate)
	err := c.cc.Invoke(ctx, ImportTemplateService_SearchImportTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importTemplateServiceClient) ReadImportTemplate(ctx context.Context, in *ReadImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error) {
	out := new(ImportTemplate)
	err := c.cc.Invoke(ctx, ImportTemplateService_ReadImportTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importTemplateServiceClient) UpdateImportTemplate(ctx context.Context, in *UpdateImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error) {
	out := new(ImportTemplate)
	err := c.cc.Invoke(ctx, ImportTemplateService_UpdateImportTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importTemplateServiceClient) PatchImportTemplate(ctx context.Context, in *PatchImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error) {
	out := new(ImportTemplate)
	err := c.cc.Invoke(ctx, ImportTemplateService_PatchImportTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importTemplateServiceClient) DeleteImportTemplate(ctx context.Context, in *DeleteImportTemplateRequest, opts ...grpc.CallOption) (*ImportTemplate, error) {
	out := new(ImportTemplate)
	err := c.cc.Invoke(ctx, ImportTemplateService_DeleteImportTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportTemplateServiceServer is the server API for ImportTemplateService service.
// All implementations must embed UnimplementedImportTemplateServiceServer
// for forward compatibility
type ImportTemplateServiceServer interface {
	CreateImportTemplate(context.Context, *CreateImportTemplateRequest) (*ImportTemplate, error)
	SearchImportTemplate(context.Context, *SearchImportTemplateRequest) (*ListImportTemplate, error)
	ReadImportTemplate(context.Context, *ReadImportTemplateRequest) (*ImportTemplate, error)
	UpdateImportTemplate(context.Context, *UpdateImportTemplateRequest) (*ImportTemplate, error)
	PatchImportTemplate(context.Context, *PatchImportTemplateRequest) (*ImportTemplate, error)
	DeleteImportTemplate(context.Context, *DeleteImportTemplateRequest) (*ImportTemplate, error)
	mustEmbedUnimplementedImportTemplateServiceServer()
}

// UnimplementedImportTemplateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImportTemplateServiceServer struct {
}

func (UnimplementedImportTemplateServiceServer) CreateImportTemplate(context.Context, *CreateImportTemplateRequest) (*ImportTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImportTemplate not implemented")
}
func (UnimplementedImportTemplateServiceServer) SearchImportTemplate(context.Context, *SearchImportTemplateRequest) (*ListImportTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImportTemplate not implemented")
}
func (UnimplementedImportTemplateServiceServer) ReadImportTemplate(context.Context, *ReadImportTemplateRequest) (*ImportTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadImportTemplate not implemented")
}
func (UnimplementedImportTemplateServiceServer) UpdateImportTemplate(context.Context, *UpdateImportTemplateRequest) (*ImportTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateImportTemplate not implemented")
}
func (UnimplementedImportTemplateServiceServer) PatchImportTemplate(context.Context, *PatchImportTemplateRequest) (*ImportTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchImportTemplate not implemented")
}
func (UnimplementedImportTemplateServiceServer) DeleteImportTemplate(context.Context, *DeleteImportTemplateRequest) (*ImportTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImportTemplate not implemented")
}
func (UnimplementedImportTemplateServiceServer) mustEmbedUnimplementedImportTemplateServiceServer() {}

// UnsafeImportTemplateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImportTemplateServiceServer will
// result in compilation errors.
type UnsafeImportTemplateServiceServer interface {
	mustEmbedUnimplementedImportTemplateServiceServer()
}

func RegisterImportTemplateServiceServer(s grpc.ServiceRegistrar, srv ImportTemplateServiceServer) {
	s.RegisterService(&ImportTemplateService_ServiceDesc, srv)
}

func _ImportTemplateService_CreateImportTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImportTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportTemplateServiceServer).CreateImportTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportTemplateService_CreateImportTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportTemplateServiceServer).CreateImportTemplate(ctx, req.(*CreateImportTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportTemplateService_SearchImportTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchImportTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportTemplateServiceServer).SearchImportTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportTemplateService_SearchImportTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportTemplateServiceServer).SearchImportTemplate(ctx, req.(*SearchImportTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportTemplateService_ReadImportTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadImportTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportTemplateServiceServer).ReadImportTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportTemplateService_ReadImportTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportTemplateServiceServer).ReadImportTemplate(ctx, req.(*ReadImportTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportTemplateService_UpdateImportTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateImportTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportTemplateServiceServer).UpdateImportTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportTemplateService_UpdateImportTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportTemplateServiceServer).UpdateImportTemplate(ctx, req.(*UpdateImportTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportTemplateService_PatchImportTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchImportTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportTemplateServiceServer).PatchImportTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportTemplateService_PatchImportTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportTemplateServiceServer).PatchImportTemplate(ctx, req.(*PatchImportTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportTemplateService_DeleteImportTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImportTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportTemplateServiceServer).DeleteImportTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImportTemplateService_DeleteImportTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportTemplateServiceServer).DeleteImportTemplate(ctx, req.(*DeleteImportTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImportTemplateService_ServiceDesc is the grpc.ServiceDesc for ImportTemplateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImportTemplateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storage.ImportTemplateService",
	HandlerType: (*ImportTemplateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImportTemplate",
			Handler:    _ImportTemplateService_CreateImportTemplate_Handler,
		},
		{
			MethodName: "SearchImportTemplate",
			Handler:    _ImportTemplateService_SearchImportTemplate_Handler,
		},
		{
			MethodName: "ReadImportTemplate",
			Handler:    _ImportTemplateService_ReadImportTemplate_Handler,
		},
		{
			MethodName: "UpdateImportTemplate",
			Handler:    _ImportTemplateService_UpdateImportTemplate_Handler,
		},
		{
			MethodName: "PatchImportTemplate",
			Handler:    _ImportTemplateService_PatchImportTemplate_Handler,
		},
		{
			MethodName: "DeleteImportTemplate",
			Handler:    _ImportTemplateService_DeleteImportTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "import_template.proto",
}
